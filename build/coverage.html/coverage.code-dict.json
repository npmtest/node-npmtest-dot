{"/home/travis/build/npmtest/node-npmtest-dot/test.js":"/* istanbul instrument in package npmtest_dot */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-dot/lib.npmtest_dot.js":"/* istanbul instrument in package npmtest_dot */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_dot = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_dot = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-dot/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-dot && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_dot */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_dot\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_dot.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_dot.rollup.js'] =\n            local.assetsDict['/assets.npmtest_dot.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_dot.__dirname + '/lib.npmtest_dot.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-dot/node_modules/dot/index.js":"/* doT + auto-compilation of doT templates\n *\n * 2012, Laura Doktorova, https://github.com/olado/doT\n * Licensed under the MIT license\n *\n * Compiles .def, .dot, .jst files found under the specified path.\n * It ignores sub-directories.\n * Template files can have multiple extensions at the same time.\n * Files with .def extension can be included in other files via {{#def.name}}\n * Files with .dot extension are compiled into functions with the same name and\n * can be accessed as renderer.filename\n * Files with .jst extension are compiled into .js files. Produced .js file can be\n * loaded as a commonJS, AMD module, or just installed into a global variable\n * (default is set to window.render).\n * All inline defines defined in the .jst file are\n * compiled into separate functions and are available via _render.filename.definename\n *\n * Basic usage:\n * var dots = require(\"dot\").process({path: \"./views\"});\n * dots.mytemplate({foo:\"hello world\"});\n *\n * The above snippet will:\n * 1. Compile all templates in views folder (.dot, .def, .jst)\n * 2. Place .js files compiled from .jst templates into the same folder.\n *    These files can be used with require, i.e. require(\"./views/mytemplate\").\n * 3. Return an object with functions compiled from .dot templates as its properties.\n * 4. Render mytemplate template.\n */\n\nvar fs = require(\"fs\"),\n\tdoT = module.exports = require(\"./doT\");\n\ndoT.process = function(options) {\n\t//path, destination, global, rendermodule, templateSettings\n\treturn new InstallDots(options).compileAll();\n};\n\nfunction InstallDots(o) {\n\tthis.__path \t\t= o.path || \"./\";\n\tif (this.__path[this.__path.length-1] !== '/') this.__path += '/';\n\tthis.__destination\t= o.destination || this.__path;\n\tif (this.__destination[this.__destination.length-1] !== '/') this.__destination += '/';\n\tthis.__global\t\t= o.global || \"window.render\";\n\tthis.__rendermodule\t= o.rendermodule || {};\n\tthis.__settings \t= o.templateSettings ? copy(o.templateSettings, copy(doT.templateSettings)) : undefined;\n\tthis.__includes\t\t= {};\n}\n\nInstallDots.prototype.compileToFile = function(path, template, def) {\n\tdef = def || {};\n\tvar modulename = path.substring(path.lastIndexOf(\"/\")+1, path.lastIndexOf(\".\"))\n\t\t, defs = copy(this.__includes, copy(def))\n\t\t, settings = this.__settings || doT.templateSettings\n\t\t, compileoptions = copy(settings)\n\t\t, defaultcompiled = doT.template(template, settings, defs)\n\t\t, exports = []\n\t\t, compiled = \"\"\n\t\t, fn;\n\n\tfor (var property in defs) {\n\t\tif (defs[property] !== def[property] && defs[property] !== this.__includes[property]) {\n\t\t\tfn = undefined;\n\t\t\tif (typeof defs[property] === 'string') {\n\t\t\t\tfn = doT.template(defs[property], settings, defs);\n\t\t\t} else if (typeof defs[property] === 'function') {\n\t\t\t\tfn = defs[property];\n\t\t\t} else if (defs[property].arg) {\n\t\t\t\tcompileoptions.varname = defs[property].arg;\n\t\t\t\tfn = doT.template(defs[property].text, compileoptions, defs);\n\t\t\t}\n\t\t\tif (fn) {\n\t\t\t\tcompiled += fn.toString().replace('anonymous', property);\n\t\t\t\texports.push(property);\n\t\t\t}\n\t\t}\n\t}\n\tcompiled += defaultcompiled.toString().replace('anonymous', modulename);\n\tfs.writeFileSync(path, \"(function(){\" + compiled\n\t\t+ \"var itself=\" + modulename + \", _encodeHTML=(\" + doT.encodeHTMLSource.toString() + \"(\" + (settings.doNotSkipEncoded || '') + \"));\"\n\t\t+ addexports(exports)\n\t\t+ \"if(typeof module!=='undefined' && module.exports) module.exports=itself;else if(typeof define==='function')define(function(){return itself;});else {\"\n\t\t+ this.__global + \"=\" + this.__global + \"||{};\" + this.__global + \"['\" + modulename + \"']=itself;}}());\");\n};\n\nfunction addexports(exports) {\n\tvar ret = '';\n\tfor (var i=0; i< exports.length; i++) {\n\t\tret += \"itself.\" + exports[i]+ \"=\" + exports[i]+\";\";\n\t}\n\treturn ret;\n}\n\nfunction copy(o, to) {\n\tto = to || {};\n\tfor (var property in o) {\n\t\tto[property] = o[property];\n\t}\n\treturn to;\n}\n\nfunction readdata(path) {\n\tvar data = fs.readFileSync(path);\n\tif (data) return data.toString();\n\tconsole.log(\"problems with \" + path);\n}\n\nInstallDots.prototype.compilePath = function(path) {\n\tvar data = readdata(path);\n\tif (data) {\n\t\treturn doT.template(data,\n\t\t\t\t\tthis.__settings || doT.templateSettings,\n\t\t\t\t\tcopy(this.__includes));\n\t}\n};\n\nInstallDots.prototype.compileAll = function() {\n\tif (doT.log) console.log(\"Compiling all doT templates...\");\n\n\tvar defFolder = this.__path,\n\t\tsources = fs.readdirSync(defFolder),\n\t\tk, l, name;\n\n\tfor( k = 0, l = sources.length; k < l; k++) {\n\t\tname = sources[k];\n\t\tif (/\\.def(\\.dot|\\.jst)?$/.test(name)) {\n\t\t\tif (doT.log) console.log(\"Loaded def \" + name);\n\t\t\tthis.__includes[name.substring(0, name.indexOf('.'))] = readdata(defFolder + name);\n\t\t}\n\t}\n\n\tfor( k = 0, l = sources.length; k < l; k++) {\n\t\tname = sources[k];\n\t\tif (/\\.dot(\\.def|\\.jst)?$/.test(name)) {\n\t\t\tif (doT.log) console.log(\"Compiling \" + name + \" to function\");\n\t\t\tthis.__rendermodule[name.substring(0, name.indexOf('.'))] = this.compilePath(defFolder + name);\n\t\t}\n\t\tif (/\\.jst(\\.dot|\\.def)?$/.test(name)) {\n\t\t\tif (doT.log) console.log(\"Compiling \" + name + \" to file\");\n\t\t\tthis.compileToFile(this.__destination + name.substring(0, name.indexOf('.')) + '.js',\n\t\t\t\t\treaddata(defFolder + name));\n\t\t}\n\t}\n\treturn this.__rendermodule;\n};\n","/home/travis/build/npmtest/node-npmtest-dot/node_modules/dot/doT.js":"// doT.js\n// 2011-2014, Laura Doktorova, https://github.com/olado/doT\n// Licensed under the MIT license.\n\n(function() {\n\t\"use strict\";\n\n\tvar doT = {\n\t\tversion: \"1.1.1\",\n\t\ttemplateSettings: {\n\t\t\tevaluate:    /\\{\\{([\\s\\S]+?(\\}?)+)\\}\\}/g,\n\t\t\tinterpolate: /\\{\\{=([\\s\\S]+?)\\}\\}/g,\n\t\t\tencode:      /\\{\\{!([\\s\\S]+?)\\}\\}/g,\n\t\t\tuse:         /\\{\\{#([\\s\\S]+?)\\}\\}/g,\n\t\t\tuseParams:   /(^|[^\\w$])def(?:\\.|\\[[\\'\\\"])([\\w$\\.]+)(?:[\\'\\\"]\\])?\\s*\\:\\s*([\\w$\\.]+|\\\"[^\\\"]+\\\"|\\'[^\\']+\\'|\\{[^\\}]+\\})/g,\n\t\t\tdefine:      /\\{\\{##\\s*([\\w\\.$]+)\\s*(\\:|=)([\\s\\S]+?)#\\}\\}/g,\n\t\t\tdefineParams:/^\\s*([\\w$]+):([\\s\\S]+)/,\n\t\t\tconditional: /\\{\\{\\?(\\?)?\\s*([\\s\\S]*?)\\s*\\}\\}/g,\n\t\t\titerate:     /\\{\\{~\\s*(?:\\}\\}|([\\s\\S]+?)\\s*\\:\\s*([\\w$]+)\\s*(?:\\:\\s*([\\w$]+))?\\s*\\}\\})/g,\n\t\t\tvarname:\t\"it\",\n\t\t\tstrip:\t\ttrue,\n\t\t\tappend:\t\ttrue,\n\t\t\tselfcontained: false,\n\t\t\tdoNotSkipEncoded: false\n\t\t},\n\t\ttemplate: undefined, //fn, compile template\n\t\tcompile:  undefined, //fn, for express\n\t\tlog: true\n\t}, _globals;\n\n\tdoT.encodeHTMLSource = function(doNotSkipEncoded) {\n\t\tvar encodeHTMLRules = { \"&\": \"&#38;\", \"<\": \"&#60;\", \">\": \"&#62;\", '\"': \"&#34;\", \"'\": \"&#39;\", \"/\": \"&#47;\" },\n\t\t\tmatchHTML = doNotSkipEncoded ? /[&<>\"'\\/]/g : /&(?!#?\\w+;)|<|>|\"|'|\\//g;\n\t\treturn function(code) {\n\t\t\treturn code ? code.toString().replace(matchHTML, function(m) {return encodeHTMLRules[m] || m;}) : \"\";\n\t\t};\n\t};\n\n\t_globals = (function(){ return this || (0,eval)(\"this\"); }());\n\n\t/* istanbul ignore else */\n\tif (typeof module !== \"undefined\" && module.exports) {\n\t\tmodule.exports = doT;\n\t} else if (typeof define === \"function\" && define.amd) {\n\t\tdefine(function(){return doT;});\n\t} else {\n\t\t_globals.doT = doT;\n\t}\n\n\tvar startend = {\n\t\tappend: { start: \"'+(\",      end: \")+'\",      startencode: \"'+encodeHTML(\" },\n\t\tsplit:  { start: \"';out+=(\", end: \");out+='\", startencode: \"';out+=encodeHTML(\" }\n\t}, skip = /$^/;\n\n\tfunction resolveDefs(c, block, def) {\n\t\treturn ((typeof block === \"string\") ? block : block.toString())\n\t\t.replace(c.define || skip, function(m, code, assign, value) {\n\t\t\tif (code.indexOf(\"def.\") === 0) {\n\t\t\t\tcode = code.substring(4);\n\t\t\t}\n\t\t\tif (!(code in def)) {\n\t\t\t\tif (assign === \":\") {\n\t\t\t\t\tif (c.defineParams) value.replace(c.defineParams, function(m, param, v) {\n\t\t\t\t\t\tdef[code] = {arg: param, text: v};\n\t\t\t\t\t});\n\t\t\t\t\tif (!(code in def)) def[code]= value;\n\t\t\t\t} else {\n\t\t\t\t\tnew Function(\"def\", \"def['\"+code+\"']=\" + value)(def);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn \"\";\n\t\t})\n\t\t.replace(c.use || skip, function(m, code) {\n\t\t\tif (c.useParams) code = code.replace(c.useParams, function(m, s, d, param) {\n\t\t\t\tif (def[d] && def[d].arg && param) {\n\t\t\t\t\tvar rw = (d+\":\"+param).replace(/'|\\\\/g, \"_\");\n\t\t\t\t\tdef.__exp = def.__exp || {};\n\t\t\t\t\tdef.__exp[rw] = def[d].text.replace(new RegExp(\"(^|[^\\\\w$])\" + def[d].arg + \"([^\\\\w$])\", \"g\"), \"$1\" + param + \"$2\");\n\t\t\t\t\treturn s + \"def.__exp['\"+rw+\"']\";\n\t\t\t\t}\n\t\t\t});\n\t\t\tvar v = new Function(\"def\", \"return \" + code)(def);\n\t\t\treturn v ? resolveDefs(c, v, def) : v;\n\t\t});\n\t}\n\n\tfunction unescape(code) {\n\t\treturn code.replace(/\\\\('|\\\\)/g, \"$1\").replace(/[\\r\\t\\n]/g, \" \");\n\t}\n\n\tdoT.template = function(tmpl, c, def) {\n\t\tc = c || doT.templateSettings;\n\t\tvar cse = c.append ? startend.append : startend.split, needhtmlencode, sid = 0, indv,\n\t\t\tstr  = (c.use || c.define) ? resolveDefs(c, tmpl, def || {}) : tmpl;\n\n\t\tstr = (\"var out='\" + (c.strip ? str.replace(/(^|\\r|\\n)\\t* +| +\\t*(\\r|\\n|$)/g,\" \")\n\t\t\t\t\t.replace(/\\r|\\n|\\t|\\/\\*[\\s\\S]*?\\*\\//g,\"\"): str)\n\t\t\t.replace(/'|\\\\/g, \"\\\\$&\")\n\t\t\t.replace(c.interpolate || skip, function(m, code) {\n\t\t\t\treturn cse.start + unescape(code) + cse.end;\n\t\t\t})\n\t\t\t.replace(c.encode || skip, function(m, code) {\n\t\t\t\tneedhtmlencode = true;\n\t\t\t\treturn cse.startencode + unescape(code) + cse.end;\n\t\t\t})\n\t\t\t.replace(c.conditional || skip, function(m, elsecase, code) {\n\t\t\t\treturn elsecase ?\n\t\t\t\t\t(code ? \"';}else if(\" + unescape(code) + \"){out+='\" : \"';}else{out+='\") :\n\t\t\t\t\t(code ? \"';if(\" + unescape(code) + \"){out+='\" : \"';}out+='\");\n\t\t\t})\n\t\t\t.replace(c.iterate || skip, function(m, iterate, vname, iname) {\n\t\t\t\tif (!iterate) return \"';} } out+='\";\n\t\t\t\tsid+=1; indv=iname || \"i\"+sid; iterate=unescape(iterate);\n\t\t\t\treturn \"';var arr\"+sid+\"=\"+iterate+\";if(arr\"+sid+\"){var \"+vname+\",\"+indv+\"=-1,l\"+sid+\"=arr\"+sid+\".length-1;while(\"+indv+\"<l\"+sid+\"){\"\n\t\t\t\t\t+vname+\"=arr\"+sid+\"[\"+indv+\"+=1];out+='\";\n\t\t\t})\n\t\t\t.replace(c.evaluate || skip, function(m, code) {\n\t\t\t\treturn \"';\" + unescape(code) + \"out+='\";\n\t\t\t})\n\t\t\t+ \"';return out;\")\n\t\t\t.replace(/\\n/g, \"\\\\n\").replace(/\\t/g, '\\\\t').replace(/\\r/g, \"\\\\r\")\n\t\t\t.replace(/(\\s|;|\\}|^|\\{)out\\+='';/g, '$1').replace(/\\+''/g, \"\");\n\t\t\t//.replace(/(\\s|;|\\}|^|\\{)out\\+=''\\+/g,'$1out+=');\n\n\t\tif (needhtmlencode) {\n\t\t\tif (!c.selfcontained && _globals && !_globals._encodeHTML) _globals._encodeHTML = doT.encodeHTMLSource(c.doNotSkipEncoded);\n\t\t\tstr = \"var encodeHTML = typeof _encodeHTML !== 'undefined' ? _encodeHTML : (\"\n\t\t\t\t+ doT.encodeHTMLSource.toString() + \"(\" + (c.doNotSkipEncoded || '') + \"));\"\n\t\t\t\t+ str;\n\t\t}\n\t\ttry {\n\t\t\treturn new Function(c.varname, str);\n\t\t} catch (e) {\n\t\t\t/* istanbul ignore else */\n\t\t\tif (typeof console !== \"undefined\") console.log(\"Could not create a template function: \" + str);\n\t\t\tthrow e;\n\t\t}\n\t};\n\n\tdoT.compile = function(tmpl, def) {\n\t\treturn doT.template(tmpl, null, def);\n\t};\n}());\n","/home/travis/build/npmtest/node-npmtest-dot/node_modules/dot/benchmarks/compileBench.js":"(function() {\n\tvar jslitmus, _, doU, doT,\n\t\tdata = { f1: 1, f2: 2, f3: 3, f4: \"http://bebedo.com/laura\"},\n\t\tsnippet = \"<h1>Just static text</h1>\\\n\t\t<p>Here is a simple {{=it.f1}} </p>\\\n\t\t<div>test {{=it.f2}}\\\n\t\t<div>{{=it.f3}}</div>\\\n\t\t<div>{{!it.f4}}</div>\\\n\t\t</div>\";\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\trunTests();\n\t} else {\n\t\twindow.onload = runTestsInBrowser;\n\t}\n\n\tfunction testsetup(snippet) {\n\n\t\tjslitmus.test('doU.js', function() {\n\t\t\tdoU.template(snippet);\n\t\t});\n\n\t\tjslitmus.test('doU.js - looping', function(count) {\n\t\t\twhile (count--) {\n\t\t\t\tdoU.template(snippet);\n\t\t\t}\n\t\t});\n\n\t\tjslitmus.test('doT.js - using this', function() {\n\t\t\tdoT.template(snippet);\n\t\t});\n\n\t\tjslitmus.test('doT.js - using this - looping', function(count) {\n\t\t\twhile (count--) {\n\t\t\t\tdoT.template(snippet);\n\t\t\t}\n\t\t});\n\t}\n\n\tfunction runTests() {\n\t\t//var util = require('util');\n\t\tjslitmus = require('./jslitmus.js');\n\t\tdoU = require('./templating/doU.js');\n\t\tdoT = require('./templating/doT.js');\n\t\tvar passOne = 0;\n\t\tconsole.log(\"*** Compilation speed test\");\n\t\tconsole.log(\"*** Small template length: \" + snippet.length);\n\t\ttestsetup(snippet);\n\t\t// Log the test results\n\t\tjslitmus.on('complete', function(test) {\n\t\t\t//console.log(util.inspect(process.memoryUsage()));\n\t\t\tconsole.log(test.toString());\n\t\t});\n\t\t// 'all_complete' fires when all tests have finished.\n\t\tjslitmus.on('all_complete', function() {\n\t\t\tswitch (passOne) {\n\t\t\tcase 0:\n\t\t\t\tpassOne++;\n\t\t\t\tfor(var i=0; i<5; i++) { snippet += snippet; }\n\t\t\t\tconsole.log(\"*** Medium template length: \" + snippet.length);\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\tpassOne++;\n\t\t\t\tfor(var i=0; i<3; i++) { snippet += snippet; }\n\t\t\t\tconsole.log(\"*** Large template length: \" + snippet.length);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tjslitmus.clearAll();\n\t\t\ttestsetup(snippet);\n\t\t\tjslitmus.runAll();\n\t\t});\n\t\t// Run it!\n\t\tjslitmus.runAll();\n\t}\n\n\tfunction runTestsInBrowser() {\n\t\tjslitmus = window.jslitmus;doU = window.doU;doT = window.doT;\n\n\t\tvar resultTmpl = doT.template(\"<h3>Template length : {{=it.size}} </h3>\t<img src='{{=it.url}}'/>\");\n\t\tvar currentSet = document.getElementById('small');\n\t\ttestsetup(snippet);\n\t\t// 'complete' fires for each test when it finishes.\n\t\tjslitmus.on('complete', function(test) {\n\t\t// Output test results\n\t\t\tcurrentSet.innerHTML += test + '<br/>';\n\t\t});\n\t\t// 'all_complete' fires when all tests have finished.\n\t\tjslitmus.on('all_complete', function() {\n\t\t\t// Get the results image URL\n\t\t\tvar url = jslitmus.getGoogleChart();\n\t\t\tif (currentSet.id === 'small') {\n\t\t\t\tcurrentSet.innerHTML += resultTmpl({size: snippet.length, url: url});\n\t\t\t\tsetTimeout(function() {\n\t\t\t\t\tjslitmus.clearAll();\n\t\t\t\t\tcurrentSet = document.getElementById('large');\n\t\t\t\t\tfor(var i=0; i<8; i++) { snippet += snippet; }\n\t\t\t\t\ttestsetup(snippet);\n\t\t\t\t\tjslitmus.runAll();\n\t\t\t\t}, 10);\n\t\t\t} else {\n\t\t\t\tcurrentSet.innerHTML += resultTmpl({size: snippet.length, url: url});\n\t\t\t}\n\t\t});\n\t\t// Run it!\n\t\tjslitmus.runAll();\n\t}\n})();\n","/home/travis/build/npmtest/node-npmtest-dot/node_modules/dot/benchmarks/jslitmus.js":"// jslitmus.js\n//\n// Copyright (c) 2010, Robert Kieffer, http://broofa.com\n// Available under MIT license (http://en.wikipedia.org/wiki/MIT_License)\n\n(function() {\n  var root = this;\n\n  //\n  // Platform detect\n  //\n\n  var platform = (function() {\n    // Platform info object\n    var p = {\n      name: null,\n      version: null,\n      os: null,\n      description: 'unknown platform',\n      toString: function() {return this.description;}\n    };\n\n    if (root.navigator) {\n      var ua = navigator.userAgent;\n\n      // Detect OS\n      var oses = 'Windows|iPhone OS|(?:Intel |PPC )?Mac OS X|Linux';\n      p.os = new RegExp('((' + oses + ') +[^ \\);]*)').test(ua) ? RegExp.$1.replace(/_/g, '.') : null;\n\n      // Detect expected names\n      p.name = /(Chrome|MSIE|Safari|Opera|Firefox|Minefield)/.test(ua) ? RegExp.$1 : null;\n\n      // Detect version\n      if (p.name == 'Opera') {\n        p.version = opera.name;\n      } else if (p.name) {\n        var vre = new RegExp('(Version|' + p.name + ')[ \\/]([^ ;]*)');\n        p.version = vre.test(ua) ? RegExp.$2 : null;\n      }\n    } else if (root.process && process.platform) {\n      // Support node.js (see http://nodejs.org)\n      p.name = 'node';\n      p.version = process.version;\n      p.os = process.platform;\n    }\n\n    // Set the description\n    var d = [];\n    if (p.name) d.push(p.name);\n    if (p.version) d.push(' ' + p.version);\n    if (p.os) d.push(' on ' + p.os);\n    if (d.length) p.description = d.join('');\n\n    return p;\n  })();\n\n  //\n  // Context-specific initialization\n  //\n\n  var sys = null, querystring = null;\n  if (platform.name == 'node') {\n    util = require('util');\n    querystring = require('querystring');\n  }\n\n  //\n  // Misc convenience methods\n  //\n\n  function log(msg) {\n    if (typeof(console) != 'undefined') {\n      console.log(msg);\n    } else if (sys) {\n      util.log(msg);\n    }\n  }\n\n  // nil function\n  function nilf(x) {\n    return x;\n  }\n\n  // Copy properties\n  function extend(dst, src) {\n    for (var k in src) {\n      dst[k] = src[k];\n    }\n    return dst;\n  }\n\n  // Array: apply f to each item in a\n  function forEach(a, f) {\n    for (var i = 0, il = (a && a.length); i < il; i++) {\n      var o = a[i];\n      f(o, i);\n    }\n  }\n\n  // Array: return array of all results of f(item)\n  function map(a, f) {\n    var o, res = [];\n    for (var i = 0, il = (a && a.length); i < il; i++) {\n      var o = a[i];\n      res.push(f(o, i));\n    }\n    return res;\n  }\n\n  // Array: filter out items for which f(item) is falsy\n  function filter(a, f) {\n    var o, res = [];\n    for (var i = 0, il = (a && a.length); i < il; i++) {\n      var o = a[i];\n      if (f(o, i)) res.push(o);\n    }\n    return res;\n  }\n\n  // Array: IE doesn't have indexOf in some cases\n  function indexOf(a, o) {\n    if (a.indexOf) return a.indexOf(o);\n    for (var i = 0, l = a.length; i < l; i++) if (a[i] === o) return i;\n    return -1;\n  }\n\n  // Enhanced escape()\n  function escape2(s) {\n    s = s.replace(/,/g, '\\\\,');\n    s = querystring ? querystring.escape(s) : escape(s);\n    s = s.replace(/\\+/g, '%2b');\n    s = s.replace(/ /g, '+');\n    return s;\n  }\n\n  // join(), for objects. Creates url query param-style strings by default\n  function join(o, delimit1, delimit2) {\n    var asQuery = !delimit1 && !delimit2;\n    if (asQuery) {\n      delimit1 = '&';\n      delimit2 = '=';\n    }\n\n    var pairs = [];\n    for (var key in o) {\n      var value = o[key];\n      if (asQuery) value = escape2(value);\n      pairs.push(key + delimit2 + o[key]);\n    }\n    return pairs.join(delimit1);\n  }\n\n  // split(), for object strings. Parses url query param strings by default\n  function split(s, delimit1, delimit2) {\n    var asQuery = !delimit1 && !delimit2;\n    if (asQuery) {\n      s = s.replace(/.*[?#]/, '');\n      delimit1 = '&';\n      delimit2 = '=';\n    }\n\n    if (match) {\n      var o = query.split(delimit1);\n      for (var i = 0; i < o.length; i++) {\n        var pair = o[i].split(new RegExp(delimit2 + '+'));\n        var key = pair.shift();\n        var value = (asQuery && pair.length > 1) ? pair.join(delimit2) : pair[0];\n        o[key] = value;\n      }\n    }\n\n    return o;\n  }\n\n  // Round x to d significant digits\n  function sig(x, d) {\n    var exp = Math.ceil(Math.log(Math.abs(x))/Math.log(10)),\n        f = Math.pow(10, exp-d);\n    return Math.round(x/f)*f;\n  }\n\n  // Convert x to a readable string version\n  function humanize(x, sd) {\n    var ax = Math.abs(x), res;\n    sd = sd | 4;  // significant digits\n    if (ax == Infinity) {\n      res = ax > 0 ? 'Infinity' : '-Infinity';\n    } else if (ax > 1e9) {\n      res = sig(x/1e9, sd) + 'G';\n    } else if (ax > 1e6) {\n      res = sig(x/1e6, sd) + 'M';\n    } else if (ax > 1e3) {\n      res = sig(x/1e3, sd) + 'k';\n    } else if (ax > .01) {\n      res = sig(x, sd);\n    } else if (ax > 1e-3) {\n      res = sig(x/1e-3, sd) + 'm';\n    } else if (ax > 1e-6) {\n      res = sig(x/1e-6, sd) + '\\u00b5'; // Greek mu\n    } else if (ax > 1e-9) {\n      res = sig(x/1e-9, sd) + 'n';\n    } else {\n      res = x ? sig(x, sd) : 0;\n    }\n    // Turn values like \"1.1000000000005\" -> \"1.1\"\n    res = (res + '').replace(/0{5,}\\d*/, '');\n\n    return res;\n  }\n\n  // Node.js-inspired event emitter API, with some enhancements.\n  function EventEmitter() {\n    var ee = this;\n    var listeners = {};\n    extend(ee, {\n      on: function(e, f) {\n        if (!listeners[e]) listeners[e] = [];\n        listeners[e].push(f);\n      },\n      removeListener: function(e, f) {\n        listeners[e] = filter(listeners[e], function(l) {\n          return l != f;\n        });\n      },\n      removeAllListeners: function(e) {\n        listeners[e] = [];\n      },\n      emit: function(e) {\n        var args = Array.prototype.slice.call(arguments, 1);\n        forEach([].concat(listeners[e], listeners['*']), function(l) {\n          ee._emitting = e;\n          if (l) l.apply(ee, args);\n        });\n        delete ee._emitting;\n      }\n    });\n  }\n\n  //\n  // Test class\n  //\n\n  /**\n   * Test manages a single test (created with JSLitmus.test())\n   */\n  function Test(name, f) {\n    var test = this;\n\n    // Test instances get EventEmitter API\n    EventEmitter.call(test);\n\n    if (!f) throw new Error('Undefined test function');\n    if (!/function[^\\(]*\\(([^,\\)]*)/.test(f)) {\n      throw new Error('\"' + name + '\" test: Invalid test function');\n    }\n\n    // If the test function takes an argument, we assume it does the iteration\n    // for us\n    var isLoop = !!RegExp.$1;\n\n    /**\n     * Reset test state\n     */\n    function reset() {\n      delete test.count;\n      delete test.time;\n      delete test.running;\n      test.emit('reset', test);\n      return test;\n    }\n\n    function clone() {\n      var test = extend(new Test(name, f), test);\n      return test.reset();\n    }\n\n    /**\n     * Run the test n times, and use the best results\n     */\n    function bestOf(n) {\n      var best = null;\n      while (n--) {\n        var t = clone();\n        t.run(null, true);\n        if (!best || t.period < best.period) {\n          best = t;\n        }\n      }\n      extend(test, best);\n    }\n\n    /**\n     * Start running a test.  Default is to run the test asynchronously (via\n     * setTimeout).  Can be made synchronous by passing true for 2nd param\n     */\n    function run(count, synchronous) {\n      count = count || test.INIT_COUNT;\n      test.running = true;\n\n      if (synchronous) {\n        _run(count, synchronous);\n      } else {\n        setTimeout(function() {\n          _run(count);\n        }, 1);\n      }\n      return test;\n    }\n\n    /**\n     * Run, for real\n     */\n    function _run(count, noTimeout) {\n\n      try {\n        var start, f = test.f, now, i = count;\n\n        // Start the timer\n        start = new Date();\n\n        // Run the test code\n        test.count = count;\n        test.time = 0;\n        test.period = 0;\n\n        test.emit('start', test);\n\n        if (isLoop) {\n          // Test code does it's own iteration\n          f(count);\n        } else {\n          // Do the iteration ourselves\n          while (i--) f();\n        }\n\n        // Get time test took (in secs)\n        test.time = Math.max(1,new Date() - start)/1000;\n\n        // Store iteration count and per-operation time taken\n        test.count = count;\n        test.period = test.time/count;\n\n        // Do we need to keep running?\n        test.running = test.time < test.MIN_TIME;\n\n        // Publish results\n        test.emit('results', test);\n\n        // Set up for another run, if needed\n        if (test.running) {\n          // Use an iteration count that will (we hope) get us close to the\n          // MAX_COUNT time.\n          var x = test.MIN_TIME/test.time;\n          var pow = Math.pow(2, Math.max(1, Math.ceil(Math.log(x)/Math.log(2))));\n          count *= pow;\n          if (count > test.MAX_COUNT) {\n            throw new Error('Max count exceeded.  If this test uses a looping function, make sure the iteration loop is working properly.');\n          }\n\n          if (noTimeout) {\n            _run(count, noTimeout);\n          } else {\n            run(count);\n          }\n        } else {\n          test.emit('complete', test);\n        }\n      } catch (err) {\n        log(err);\n        // Exceptions are caught and displayed in the test UI\n        test.emit('error', err);\n      }\n\n      return test;\n    }\n\n    /**\n    * Get the number of operations per second for this test.\n    *\n    * @param normalize if true, iteration loop overhead taken into account.\n    *                  Note that normalized tests may return Infinity if the\n    *                  test time is of the same order as the calibration time.\n    */\n    function getHz(normalize) {\n      var p = test.period;\n\n      // Adjust period based on the calibration test time\n      if (normalize) {\n        var cal = test.isLoop ? Test.LOOP_CAL : Test.NOLOOP_CAL;\n        if (!cal.period) {\n          // Run calibration if needed\n          cal.MIN_TIME = .3;\n          cal.bestOf(3);\n        }\n\n        // Subtract off calibration time.  In theory this should never be\n        // negative, but in practice the calibration times are affected by a\n        // variety of factors so just clip to zero and let users test for\n        // getHz() == Infinity\n        p = Math.max(0, p - cal.period);\n      }\n\n      return sig(1/p, 4);\n    }\n\n    // Set properties that are specific to this instance\n    extend(test, {\n      // Test name\n      name: name,\n\n      // Test function\n      f: f,\n\n      // True if the test function does it's own looping (i.e. takes an arg)\n      isLoop: isLoop,\n\n      clone: clone,\n      run: run,\n      bestOf: bestOf,\n      getHz: getHz,\n      reset: reset\n    });\n\n    // IE7 doesn't do 'toString' or 'toValue' in object enumerations, so set\n    // it explicitely here.\n    test.toString = function() {\n      if (this.time) {\n        return this.name + ', f = '  +\n        humanize(this.getHz()) + 'hz (' +\n        humanize(this.count) + '/' + humanize(this.time) + 'secs)';\n      } else {\n        return this.name + ', count = '  + humanize(this.count);\n      }\n    };\n  };\n\n  // Set static properties\n  extend(Test, {\n    LOOP_CAL: new Test('loop cal', function(count) {while (count--) {}}),\n    NOLOOP_CAL: new Test('noloop cal', nilf)\n  });\n\n  // Set default property values\n  extend(Test.prototype, {\n    // Initial number of iterations\n    INIT_COUNT: 10,\n\n    // Max iterations allowed (used to detect bad looping functions)\n    MAX_COUNT: 1e9,\n\n    // Minimum time test should take to get valid results (secs)\n    MIN_TIME: 1.0\n  });\n\n  //\n  // jslitmus\n  //\n\n  // Set up jslitmus context\n  var jslitmus;\n  if (platform.name == 'node') {\n    jslitmus = exports;\n  } else {\n    jslitmus = root.jslitmus = {};\n  }\n\n  var tests = [], // test store (all tests added w/ jslitmus.test())\n      queue = [], // test queue (to be run)\n      currentTest; // currently runnning test\n\n  // jslitmus gets EventEmitter API\n  EventEmitter.call(jslitmus);\n\n  /**\n    * Create a new test\n    */\n  function test(name, f) {\n    // Create the Test object\n    var test = new Test(name, f);\n    tests.push(test);\n\n    // Run the next test if this one finished\n    test.on('*', function() {\n      // Forward test events to jslitmus listeners\n      var args = Array.prototype.slice.call(arguments);\n      args.unshift(test._emitting);\n      jslitmus.emit.apply(jslitmus, args);\n\n      // Auto-run the next test\n      if (test._emitting == 'complete') {\n        currentTest = null;\n        _nextTest();\n      }\n    });\n\n    jslitmus.emit('added', test);\n\n    return test;\n  }\n\n  /**\n    * Add all tests to the run queue\n    */\n  function runAll(e) {\n    forEach(tests, _queueTest);\n  }\n\n  /**\n    * Remove all tests from the run queue.  The current test has to finish on\n    * it's own though\n    */\n  function stop() {\n    while (queue.length) {\n      var test = queue.shift();\n    }\n  }\n\n  /**\n    * Run the next test in the run queue\n    */\n  function _nextTest() {\n    if (!currentTest) {\n      var test = queue.shift();\n      if (test) {\n        currentTest = test;\n        test.run();\n      } else {\n        jslitmus.emit('all_complete');\n      }\n    }\n  }\n\n  /**\n    * Add a test to the run queue\n    */\n  function _queueTest(test) {\n    if (indexOf(queue, test) >= 0) return;\n    queue.push(test);\n    _nextTest();\n  }\n\n  function clearAll() {\n\ttests = [];\n  }\n\n  /**\n    * Generate a Google Chart URL that shows the data for all tests\n    */\n  function getGoogleChart(normalize) {\n    var chart_title = [\n      'Operations/second on ' + platform.name,\n      '(' + platform.version + ' / ' + platform.os + ')'\n    ];\n\n    var n = tests.length, markers = [], data = [];\n    var d, min = 0, max = -1e10;\n\n    // Gather test data\n\n    var markers = map(tests, function(test, i) {\n      if (test.count) {\n        var hz = test.getHz();\n        var v = hz != Infinity ? hz : 0;\n        data.push(v);\n        var label = test.name + '(' + humanize(hz)+ ')';\n        var marker = 't' + escape2(label) + ',000000,0,' + i + ',10';\n        max = Math.max(v, max);\n\n        return marker;\n      }\n    });\n\n    if (markers.length <= 0) return null;\n\n    // Build labels\n    var labels = [humanize(min), humanize(max)];\n\n    var w = 250, bw = 15;\n    var bs = 5;\n    var h = markers.length*(bw + bs) + 30 + chart_title.length*20;\n\n    var params = {\n      chtt: escape(chart_title.join('|')),\n      chts: '000000,10',\n      cht: 'bhg',                     // chart type\n      chd: 't:' + data.join(','),     // data set\n      chds: min + ',' + max,          // max/min of data\n      chxt: 'x',                      // label axes\n      chxl: '0:|' + labels.join('|'), // labels\n      chsp: '0,1',\n      chm: markers.join('|'),         // test names\n      chbh: [bw, 0, bs].join(','),    // bar widths\n      // chf: 'bg,lg,0,eeeeee,0,eeeeee,.5,ffffff,1', // gradient\n      chs: w + 'x' + h\n    };\n\n    var url = 'http://chart.apis.google.com/chart?' + join(params);\n\n    return url;\n  }\n\n  // Public API\n  extend(jslitmus, {\n    Test: Test,\n    platform: platform,\n    test: test,\n    runAll: runAll,\n    getGoogleChart: getGoogleChart,\n\tclearAll: clearAll\n  });\n\n  // Expose code goodness we've got here, since it's useful, but do so in a way\n  // that doesn't commit us to supporting it in future versions.\n  jslitmus.unsupported = {\n    nilf: nilf,\n    log: log,\n    extend: extend,\n    forEach: forEach,\n    filter: filter,\n    map: map,\n    indexOf: indexOf,\n    escape2: escape2,\n    join: join,\n    split: split,\n    sig: sig,\n    humanize: humanize\n  };\n})();\n","/home/travis/build/npmtest/node-npmtest-dot/node_modules/dot/benchmarks/templating/doU.js":"// doU.js\n// (c) 2011, Laura Doktorova\n// https://github.com/olado/doT\n//\n// doU is an extraction and slight modification of an excellent\n// templating function from jQote2.js (jQuery plugin) by aefxx\n// (http://aefxx.com/jquery-plugins/jqote2/).\n//\n// Modifications:\n// 1. nodejs support\n// 2. allow for custom template markers\n// 3. only allow direct invocation of the compiled function\n//\n// Licensed under the MIT license.\n\n(function() {\n\tvar doU = { version : '0.1.2' };\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tmodule.exports = doU;\n\t} else {\n\t\tthis.doU = doU;\n\t}\n\n\tdoU.templateSettings = {\n\t\tbegin : '{{',\n\t\tend : '}}',\n\t\tvarname : 'it'\n\t};\n\n\tdoU.template = function(tmpl, conf) {\n\t\tconf = conf || doU.templateSettings;\n\t\tvar str = '', tb = conf.begin, te = conf.end, m, l,\n\t\t\tarr = tmpl.replace(/\\s*<!\\[CDATA\\[\\s*|\\s*\\]\\]>\\s*|[\\r\\n\\t]|(\\/\\*[\\s\\S]*?\\*\\/)/g, '')\n\t\t\t\t.split(tb).join(te +'\\x1b')\n\t\t\t\t.split(te);\n\n\t\tfor (m=0,l=arr.length; m < l; m++) {\n\t\t\tstr += arr[m].charAt(0) !== '\\x1b' ?\n\t\t\t\"out+='\" + arr[m].replace(/(\\\\|[\"'])/g, '\\\\$1') + \"'\" : (arr[m].charAt(1) === '=' ?\n\t\t\t';out+=(' + arr[m].substr(2) + ');' : (arr[m].charAt(1) === '!' ?\n\t\t\t';out+=(' + arr[m].substr(2) + \").toString().replace(/&(?!\\\\w+;)/g, '&#38;').split('<').join('&#60;').split('>').join('&#62;').split('\" + '\"' + \"').join('&#34;').split(\" + '\"' + \"'\" + '\"' + \").join('&#39;').split('/').join('&#x2F;');\" : ';' + arr[m].substr(1)));\n\t\t}\n\n\t\tstr = ('var out=\"\";'+str+';return out;')\n\t\t\t.split(\"out+='';\").join('')\n\t\t\t.split('var out=\"\";out+=').join('var out=');\n\n\t\ttry {\n\t\t\treturn new Function(conf.varname, str);\n\t\t} catch (e) {\n\t\t\tif (typeof console !== 'undefined') console.log(\"Could not create a template function: \" + str);\n\t\t\tthrow e;\n\t\t}\n\t};\n}());\n","/home/travis/build/npmtest/node-npmtest-dot/node_modules/dot/benchmarks/templating/doT.js":"// doT.js\n// 2011-2014, Laura Doktorova, https://github.com/olado/doT\n// Licensed under the MIT license.\n\n(function() {\n\t\"use strict\";\n\n\tvar doT = {\n\t\tversion: \"1.0.3\",\n\t\ttemplateSettings: {\n\t\t\tevaluate:    /\\{\\{([\\s\\S]+?(\\}?)+)\\}\\}/g,\n\t\t\tinterpolate: /\\{\\{=([\\s\\S]+?)\\}\\}/g,\n\t\t\tencode:      /\\{\\{!([\\s\\S]+?)\\}\\}/g,\n\t\t\tuse:         /\\{\\{#([\\s\\S]+?)\\}\\}/g,\n\t\t\tuseParams:   /(^|[^\\w$])def(?:\\.|\\[[\\'\\\"])([\\w$\\.]+)(?:[\\'\\\"]\\])?\\s*\\:\\s*([\\w$\\.]+|\\\"[^\\\"]+\\\"|\\'[^\\']+\\'|\\{[^\\}]+\\})/g,\n\t\t\tdefine:      /\\{\\{##\\s*([\\w\\.$]+)\\s*(\\:|=)([\\s\\S]+?)#\\}\\}/g,\n\t\t\tdefineParams:/^\\s*([\\w$]+):([\\s\\S]+)/,\n\t\t\tconditional: /\\{\\{\\?(\\?)?\\s*([\\s\\S]*?)\\s*\\}\\}/g,\n\t\t\titerate:     /\\{\\{~\\s*(?:\\}\\}|([\\s\\S]+?)\\s*\\:\\s*([\\w$]+)\\s*(?:\\:\\s*([\\w$]+))?\\s*\\}\\})/g,\n\t\t\tvarname:\t\"it\",\n\t\t\tstrip:\t\ttrue,\n\t\t\tappend:\t\ttrue,\n\t\t\tselfcontained: false,\n\t\t\tdoNotSkipEncoded: false\n\t\t},\n\t\ttemplate: undefined, //fn, compile template\n\t\tcompile:  undefined  //fn, for express\n\t}, _globals;\n\n\tdoT.encodeHTMLSource = function(doNotSkipEncoded) {\n\t\tvar encodeHTMLRules = { \"&\": \"&#38;\", \"<\": \"&#60;\", \">\": \"&#62;\", '\"': \"&#34;\", \"'\": \"&#39;\", \"/\": \"&#47;\" },\n\t\t\tmatchHTML = doNotSkipEncoded ? /[&<>\"'\\/]/g : /&(?!#?\\w+;)|<|>|\"|'|\\//g;\n\t\treturn function(code) {\n\t\t\treturn code ? code.toString().replace(matchHTML, function(m) {return encodeHTMLRules[m] || m;}) : \"\";\n\t\t};\n\t};\n\n\t_globals = (function(){ return this || (0,eval)(\"this\"); }());\n\n\tif (typeof module !== \"undefined\" && module.exports) {\n\t\tmodule.exports = doT;\n\t} else if (typeof define === \"function\" && define.amd) {\n\t\tdefine(function(){return doT;});\n\t} else {\n\t\t_globals.doT = doT;\n\t}\n\n\tvar startend = {\n\t\tappend: { start: \"'+(\",      end: \")+'\",      startencode: \"'+encodeHTML(\" },\n\t\tsplit:  { start: \"';out+=(\", end: \");out+='\", startencode: \"';out+=encodeHTML(\" }\n\t}, skip = /$^/;\n\n\tfunction resolveDefs(c, block, def) {\n\t\treturn ((typeof block === \"string\") ? block : block.toString())\n\t\t.replace(c.define || skip, function(m, code, assign, value) {\n\t\t\tif (code.indexOf(\"def.\") === 0) {\n\t\t\t\tcode = code.substring(4);\n\t\t\t}\n\t\t\tif (!(code in def)) {\n\t\t\t\tif (assign === \":\") {\n\t\t\t\t\tif (c.defineParams) value.replace(c.defineParams, function(m, param, v) {\n\t\t\t\t\t\tdef[code] = {arg: param, text: v};\n\t\t\t\t\t});\n\t\t\t\t\tif (!(code in def)) def[code]= value;\n\t\t\t\t} else {\n\t\t\t\t\tnew Function(\"def\", \"def['\"+code+\"']=\" + value)(def);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn \"\";\n\t\t})\n\t\t.replace(c.use || skip, function(m, code) {\n\t\t\tif (c.useParams) code = code.replace(c.useParams, function(m, s, d, param) {\n\t\t\t\tif (def[d] && def[d].arg && param) {\n\t\t\t\t\tvar rw = (d+\":\"+param).replace(/'|\\\\/g, \"_\");\n\t\t\t\t\tdef.__exp = def.__exp || {};\n\t\t\t\t\tdef.__exp[rw] = def[d].text.replace(new RegExp(\"(^|[^\\\\w$])\" + def[d].arg + \"([^\\\\w$])\", \"g\"), \"$1\" + param + \"$2\");\n\t\t\t\t\treturn s + \"def.__exp['\"+rw+\"']\";\n\t\t\t\t}\n\t\t\t});\n\t\t\tvar v = new Function(\"def\", \"return \" + code)(def);\n\t\t\treturn v ? resolveDefs(c, v, def) : v;\n\t\t});\n\t}\n\n\tfunction unescape(code) {\n\t\treturn code.replace(/\\\\('|\\\\)/g, \"$1\").replace(/[\\r\\t\\n]/g, \" \");\n\t}\n\n\tdoT.template = function(tmpl, c, def) {\n\t\tc = c || doT.templateSettings;\n\t\tvar cse = c.append ? startend.append : startend.split, needhtmlencode, sid = 0, indv,\n\t\t\tstr  = (c.use || c.define) ? resolveDefs(c, tmpl, def || {}) : tmpl;\n\n\t\tstr = (\"var out='\" + (c.strip ? str.replace(/(^|\\r|\\n)\\t* +| +\\t*(\\r|\\n|$)/g,\" \")\n\t\t\t\t\t.replace(/\\r|\\n|\\t|\\/\\*[\\s\\S]*?\\*\\//g,\"\"): str)\n\t\t\t.replace(/'|\\\\/g, \"\\\\$&\")\n\t\t\t.replace(c.interpolate || skip, function(m, code) {\n\t\t\t\treturn cse.start + unescape(code) + cse.end;\n\t\t\t})\n\t\t\t.replace(c.encode || skip, function(m, code) {\n\t\t\t\tneedhtmlencode = true;\n\t\t\t\treturn cse.startencode + unescape(code) + cse.end;\n\t\t\t})\n\t\t\t.replace(c.conditional || skip, function(m, elsecase, code) {\n\t\t\t\treturn elsecase ?\n\t\t\t\t\t(code ? \"';}else if(\" + unescape(code) + \"){out+='\" : \"';}else{out+='\") :\n\t\t\t\t\t(code ? \"';if(\" + unescape(code) + \"){out+='\" : \"';}out+='\");\n\t\t\t})\n\t\t\t.replace(c.iterate || skip, function(m, iterate, vname, iname) {\n\t\t\t\tif (!iterate) return \"';} } out+='\";\n\t\t\t\tsid+=1; indv=iname || \"i\"+sid; iterate=unescape(iterate);\n\t\t\t\treturn \"';var arr\"+sid+\"=\"+iterate+\";if(arr\"+sid+\"){var \"+vname+\",\"+indv+\"=-1,l\"+sid+\"=arr\"+sid+\".length-1;while(\"+indv+\"<l\"+sid+\"){\"\n\t\t\t\t\t+vname+\"=arr\"+sid+\"[\"+indv+\"+=1];out+='\";\n\t\t\t})\n\t\t\t.replace(c.evaluate || skip, function(m, code) {\n\t\t\t\treturn \"';\" + unescape(code) + \"out+='\";\n\t\t\t})\n\t\t\t+ \"';return out;\")\n\t\t\t.replace(/\\n/g, \"\\\\n\").replace(/\\t/g, '\\\\t').replace(/\\r/g, \"\\\\r\")\n\t\t\t.replace(/(\\s|;|\\}|^|\\{)out\\+='';/g, '$1').replace(/\\+''/g, \"\");\n\t\t\t//.replace(/(\\s|;|\\}|^|\\{)out\\+=''\\+/g,'$1out+=');\n\n\t\tif (needhtmlencode) {\n\t\t\tif (!c.selfcontained && _globals && !_globals._encodeHTML) _globals._encodeHTML = doT.encodeHTMLSource(c.doNotSkipEncoded);\n\t\t\tstr = \"var encodeHTML = typeof _encodeHTML !== 'undefined' ? _encodeHTML : (\"\n\t\t\t\t+ doT.encodeHTMLSource.toString() + \"(\" + (c.doNotSkipEncoded || '') + \"));\"\n\t\t\t\t+ str;\n\t\t}\n\t\ttry {\n\t\t\treturn new Function(c.varname, str);\n\t\t} catch (e) {\n\t\t\tif (typeof console !== \"undefined\") console.log(\"Could not create a template function: \" + str);\n\t\t\tthrow e;\n\t\t}\n\t};\n\n\tdoT.compile = function(tmpl, def) {\n\t\treturn doT.template(tmpl, null, def);\n\t};\n}());\n","/home/travis/build/npmtest/node-npmtest-dot/node_modules/dot/benchmarks/templatesBench.js":"(function() {\n\tvar jslitmus, _, doU, doT,\n\t\tdata = { f1: 1, f2: 2, f3: 3, f4: \"http://bebedo.com/laura\"},\n\t\tsnippet = \"<h1>Just static text</h1>\\\n\t\t<p>Here is a simple {{=it.f1}} </p>\\\n\t\t<div>test {{=it.f2}}\\\n\t\t<div>{{=it.f3}}</div>\\\n\t\t<div>{{!it.f4}}</div>\\\n\t\t</div>\";\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\trunTests();\n\t} else {\n\t\twindow.onload = runTestsInBrowser;\n\t}\n\n\tfunction testsetup(snippet) {\n\t\t// doU with 'it'\n\t\tvar doUCompiled = doU.template(snippet);\n\t\t// doT with 'it'\n\t\tvar doTCompiledParam = doT.template(snippet);\n\t\t// doT with 'this'\n\t\tvar doTCompiled = doT.template(snippet.replace(/=it\\./g, '=this.').replace(/{{!it\\./g, '{{!this.'));\n\t\t// doT with 'it' and append = false\n\t\tdoT.templateSettings.append = false;\n\t\tvar doTCompiledNoAppend = doT.template(snippet);\n\n\t\tjslitmus.test('doU.js', function() {\n\t\t\tdoUCompiled(data);\n\t\t});\n\n\t\tjslitmus.test('doU.js - looping', function(count) {\n\t\t\twhile (count--) {\n\t\t\t\tdoUCompiled(data);\n\t\t\t}\n\t\t});\n\n\t\tjslitmus.test('doT.js - using this', function() {\n\t\t\tdoTCompiled.call(data);\n\t\t});\n\n\t\tjslitmus.test('doT.js - using this - looping', function(count) {\n\t\t\twhile (count--) {\n\t\t\t\tdoTCompiled.call(data);\n\t\t\t}\n\t\t});\n\n\t\tjslitmus.test('doT.js - using it', function() {\n\t\t\tdoTCompiledParam(data);\n\t\t});\n\n\t\tjslitmus.test('doT.js - using it - looping', function(count) {\n\t\t\twhile (count--) {\n\t\t\t\tdoTCompiledParam(data);\n\t\t\t}\n\t\t});\n\n\t\tjslitmus.test('doT.js - append off', function() {\n\t\t\tdoTCompiledNoAppend(data);\n\t\t});\n\n\t\tjslitmus.test('doT.js - append off - looping', function(count) {\n\t\t\twhile (count--) {\n\t\t\t\tdoTCompiledNoAppend(data);\n\t\t\t}\n\t\t});\n}\n\n\tfunction runTests() {\n\t\t//var util = require('util');\n\t\tjslitmus = require('./jslitmus.js');\n\t\tdoU = require('./templating/doU.js');\n\t\tdoT = require('./templating/doT.js');\n\t\tvar passOne = 0;\n\t\tconsole.log(\"*** Small template length: \" + snippet.length);\n\t\ttestsetup(snippet);\n\t\t// Log the test results\n\t\tjslitmus.on('complete', function(test) {\n\t\t\t//console.log(util.inspect(process.memoryUsage()));\n\t\t\tconsole.log(test.toString());\n\t\t});\n\t\t// 'all_complete' fires when all tests have finished.\n\t\tjslitmus.on('all_complete', function() {\n\t\t\tswitch (passOne) {\n\t\t\tcase 0:\n\t\t\t\tpassOne++;\n\t\t\t\tfor(var i=0; i<5; i++) { snippet += snippet; }\n\t\t\t\tconsole.log(\"*** Medium template length: \" + snippet.length);\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\tpassOne++;\n\t\t\t\tfor(var i=0; i<3; i++) { snippet += snippet; }\n\t\t\t\tconsole.log(\"*** Large template length: \" + snippet.length);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tjslitmus.clearAll();\n\t\t\ttestsetup(snippet);\n\t\t\tjslitmus.runAll();\n\t\t});\n\t\t// Run it!\n\t\tjslitmus.runAll();\n\t}\n\n\tfunction runTestsInBrowser() {\n\t\tjslitmus = window.jslitmus;doU = window.doU;doT = window.doT;\n\n\t\tvar resultTmpl = doT.template(\"<h3>Template length : {{=it.size}} </h3>\t<img src='{{=it.url}}'/>\");\n\t\tvar currentSet = document.getElementById('small');\n\t\ttestsetup(snippet);\n\t\t// 'complete' fires for each test when it finishes.\n\t\tjslitmus.on('complete', function(test) {\n\t\t// Output test results\n\t\t\tcurrentSet.innerHTML += test + '<br/>';\n\t\t});\n\t\t// 'all_complete' fires when all tests have finished.\n\t\tjslitmus.on('all_complete', function() {\n\t\t\t// Get the results image URL\n\t\t\tvar url = jslitmus.getGoogleChart();\n\t\t\tif (currentSet.id === 'small') {\n\t\t\t\tcurrentSet.innerHTML += resultTmpl({size: snippet.length, url: url});\n\t\t\t\tsetTimeout(function() {\n\t\t\t\t\tjslitmus.clearAll();\n\t\t\t\t\tcurrentSet = document.getElementById('large');\n\t\t\t\t\tfor(var i=0; i<8; i++) { snippet += snippet; }\n\t\t\t\t\ttestsetup(snippet);\n\t\t\t\t\tjslitmus.runAll();\n\t\t\t\t}, 10);\n\t\t\t} else {\n\t\t\t\tcurrentSet.innerHTML += resultTmpl({size: snippet.length, url: url});\n\t\t\t}\n\t\t});\n\t\t// Run it!\n\t\tjslitmus.runAll();\n\t}\n})();\n","/home/travis/build/npmtest/node-npmtest-dot/node_modules/dot/doU.js":"// doU.js\n// (c) 2011, Laura Doktorova\n// https://github.com/olado/doT\n//\n// doU is an extraction and slight modification of an excellent\n// templating function from jQote2.js (jQuery plugin) by aefxx\n// (http://aefxx.com/jquery-plugins/jqote2/).\n//\n// Modifications:\n// 1. nodejs support\n// 2. allow for custom template markers\n// 3. only allow direct invocation of the compiled function\n//\n// Licensed under the MIT license.\n\n(function() {\n\tvar doU = { version : '0.1.2' };\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tmodule.exports = doU;\n\t} else {\n\t\tthis.doU = doU;\n\t}\n\n\tdoU.templateSettings = {\n\t\tbegin : '{{',\n\t\tend : '}}',\n\t\tvarname : 'it'\n\t};\n\n\tdoU.template = function(tmpl, conf) {\n\t\tconf = conf || doU.templateSettings;\n\t\tvar str = '', tb = conf.begin, te = conf.end, m, l,\n\t\t\tarr = tmpl.replace(/\\s*<!\\[CDATA\\[\\s*|\\s*\\]\\]>\\s*|[\\r\\n\\t]|(\\/\\*[\\s\\S]*?\\*\\/)/g, '')\n\t\t\t\t.split(tb).join(te +'\\x1b')\n\t\t\t\t.split(te);\n\n\t\tfor (m=0,l=arr.length; m < l; m++) {\n\t\t\tstr += arr[m].charAt(0) !== '\\x1b' ?\n\t\t\t\"out+='\" + arr[m].replace(/(\\\\|[\"'])/g, '\\\\$1') + \"'\" : (arr[m].charAt(1) === '=' ?\n\t\t\t';out+=(' + arr[m].substr(2) + ');' : (arr[m].charAt(1) === '!' ?\n\t\t\t';out+=(' + arr[m].substr(2) + \").toString().replace(/&(?!\\\\w+;)/g, '&#38;').split('<').join('&#60;').split('>').join('&#62;').split('\" + '\"' + \"').join('&#34;').split(\" + '\"' + \"'\" + '\"' + \").join('&#39;').split('/').join('&#x2F;');\" : ';' + arr[m].substr(1)));\n\t\t}\n\n\t\tstr = ('var out=\"\";'+str+';return out;')\n\t\t\t.split(\"out+='';\").join('')\n\t\t\t.split('var out=\"\";out+=').join('var out=');\n\n\t\ttry {\n\t\t\treturn new Function(conf.varname, str);\n\t\t} catch (e) {\n\t\t\tif (typeof console !== 'undefined') console.log(\"Could not create a template function: \" + str);\n\t\t\tthrow e;\n\t\t}\n\t};\n}());\n"}